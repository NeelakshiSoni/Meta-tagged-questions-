# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def dfs(node , target) : 
            if not node : 
                return False 
            if node == target : 
                return True 
            
            return dfs(node.left , target) or dfs(node.right , target) 
        
        pNode = dfs(root, p)
        qNode = dfs(root , q) 
        if pNode and qNode :
            
            def dfs(node) : 
                if not node : 
                    return 
                if node == p or node == q : 
                    return node 
                l = dfs(node.left) 
                r = dfs(node.right) 
                if l and r : 
                    return node 
                elif l  and not  r: 
                    return l 
                elif not l and r : 
                    return r 
                
            return  dfs(root)
            
            
            
            
            
        else: 
            return None 
