"""
Medium

3241

100

Add to List

Share
You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

 """
class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        
        graph = defaultdict(list) 
        
        for x , y in edges : 
            graph[x].append(y)
            graph[y].append(x) 
            
        visited = set()
            
        def dfs(node , parent) : 
            
            if node in visited : 
                return False
            
            visited.add(node)
            
            
            for nei in graph[node] :
                if nei != parent and not dfs(nei , node) : 
                    
                    return False 
            return True 
                
            
            
            
        return dfs(0 , 0) and len(visited)== n 
            
